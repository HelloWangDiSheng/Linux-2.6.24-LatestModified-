#ifndef _ASM_GENERIC_MMAN_H
#define _ASM_GENERIC_MMAN_H
/*MAP_PRIVATE | MAP_ANONYMOUS表示私有匿名映射，我们常常利用这种映射方式来申请虚拟内存
，比如，我们使用glibc库里封装的malloc函数进行虚拟内存申请时，当申请的内存大于128K的时
候，malloc就会调用mmap采用私有匿名映射的方式来申请堆内存。因为它是私有的，所以申请到
的内存是进程独占的，多进程之间不能共享。这里需要特别强调一下mmap私有匿名映射申请到的
只是虚拟内存，内核只是在进程虚拟内存空间中划分一段虚拟内存区域VMA出来，并将VMA该初始
化的属性初始化好，mmap系统调用就结束了。这里和物理内存还没有发生任何关系。当进程开始
访问这段虚拟内存区域时，发现这段虚拟内存区域背后没有任何物理内存与其关联，体现在内核
中就是这段虚拟内存地址在页表中的PTE项是空的。或者PTE中的P位为0 ，这些都是表示虚拟内存
还未与物理内存进行映射。这时MMU就会触发缺页异常（page fault），这里的缺页指的就是缺少
物理内存页，随后进程就会切换到内核态，在内核缺页中断处理程序中，为这段虚拟内存区域分配
对应大小的物理内存页，随后将物理内存页中的内容全部初始化为0 ，最后在页表中建立虚拟内存
与物理内存的映射关系，缺页异常处理结束当缺页处理程序返回时，CPU会重新启动引起本次缺页
异常的访存指令，这时MMU就可以正常翻译出物理内存地址了。mmap的私有匿名映射除了用于为进
程申请虚拟内存之外，还会应用在execve系统调用中，execve用于在当前进程中加载并执行一个新
的二进制执行文件*/

/*表示该虚拟内存区域背后映射的物理内存是可读的*/
#define PROT_READ			0x1
/*表示该虚拟内存区域背后映射的物理内存是可写的*/
#define PROT_WRITE			0x2
/*表示该虚拟内存区域背后映射的物理内存所存储的内容是可以被执行的，该内存区域内往往
存储的是执行程序的机器码，比如进程虚拟内存空间中的代码段，以及动态链接库通过文件映
射的方式加载进文件映射与匿名映射区里的代码段，这些 VMA 的权限就是 PROT_EXEC*/
#define PROT_EXEC			0x4
/*页可以用于原子操作*/
#define PROT_SEM			0x8
/*表示这段虚拟内存区域是不能被访问的，既不可读写，也不可执行。用于实现防范攻击的
guard page。如果攻击者访问了某个guard page，就会触发SIGSEV段错误。除此之外，指定
PROT_NONE还可以为进程预先保留这部分虚拟内存区域，虽然不能被访问，但是当后面进程需
要的时候，可以通过mprotect系统调用修改这部分虚拟内存区域的权限。mprotect系统调用可
以动态修改进程虚拟内存空间中任意一段虚拟内存区域的权限*/
#define PROT_NONE			0x0
/*mprotect标识：vma向下扩展*/
#define PROT_GROWSDOWN		0x01000000
/*mprotect标识：vma向上扩展*/
#define PROT_GROWSUP		0x02000000
/*共享映射。通过mmap映射出的这片内存区域在多进程之间是共享的，一个进程修改了共享映射
的内存区域，其他进程是可以看到的，用于多进程之间的通信。如果一个对象（通常是文件）在
几个进程间共享时，必须使用该标识*/
#define MAP_SHARED			0x01
/*私有映射。创建一个与数据源分离的私有映射，对映射区的写入操作不影响文件中的数据*/
#define MAP_PRIVATE			0x02
/*映射类型掩码*/
#define MAP_TYPE			0x0f
/*固定映射。映射将在固定地址创建。倘若如此，内核只会确保该地址满足对齐要求（按页），
而且所要求的区间完全在可用地址空间内。如果没有设置该标志，内核可以在受阻时随意改变
目标地址。例如，在目标地址已经存在一个映射的情况（否则，现存映射将被覆盖）*/
#define MAP_FIXED			0x10
/*不可用于文件。创建与任何数据源都不相关的匿名映射。fd和offset这两个参数也就没有了
意义fd参数需要被设置为-1 。当我们进行文件映射的时候，只需要指定fd和offset参数就可以
了。此类映射可用于为应用程序分配类似malloc所用的内存*/
#define MAP_ANONYMOUS		0x20
/*异步模式同步内存。将内存页中的脏数据的回写调度到稍后执行。该标识几乎不需要做什么
工作，由于内核将跟踪脏页的状态，无论如何，在某些时候，脏页都会被同步到块设备*/
#define MS_ASYNC			1
/*无效缓存*/
#define MS_INVALIDATE		2
/*同步模式同步内存。将内存页中的脏数据同步写出到磁盘*/
#define MS_SYNC				4		/* synchronous memory sync */
/**/
#define MADV_NORMAL			0		/* no further special treatment */
/*期望随机页引用*/
#define MADV_RANDOM			1
/*期望顺序页引用*/
#define MADV_SEQUENTIAL	2
/*需要这些页*/
#define MADV_WILLNEED		3
/*不需要这些页*/
#define MADV_DONTNEED		4

/*通用参数：在不同体系结构上尽量保持一致性*/
/*删除页和资源*/
#define MADV_REMOVE	9
/*不能通过fork继承*/
#define MADV_DONTFORK	10
/*通过fork可继承*/
#define MADV_DOFORK	11
/*兼容标识*/
#define MAP_FILE	0

#endif
